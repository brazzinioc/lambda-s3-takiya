AWSTemplateFormatVersion: 2010-09-09
Description: Requisites for code-pipeline

Metadata:
  AWS::CloudFormation::Interface:
    ParametersGroups:
      - Label:
          default: "Topic name"
        Parameters:
          - topicName

      - Label:
          default: "Buckets S3"
        Parameters:
          - bucketImgSourceName
          - bucketImgDestinationName

      - Label:
          default: "ECR Repository to save Lambda Image"
        Parameters:
          - ecrRepositoryName

      - Label:
          default: "IAM role for CodeBuild"
        Parameters:
          - codeBuildRoleName
          - codeBuildPolicyName

      - Label:
          default: "IAM role for CodePipeline"
        Parameters:
          - codePipelineRoleName
          - codePipelinePolicyName

      - Label:
          default: "IAM role for Lambda Function"
        Parameters:
          - lambdaRoleName
          - lambdaCloudwatchPolicyName
          - lambdaS3PolicyName

    ParameterLabels:
      topicName:
        default: "Ingresa el nombre del Topic para Notificaciones"

      bucketImgSourceName:
        default: "Ingresa el nombre del Bucket Origen de Imágenes"

      bucketImgDestinationName:
        default: "Ingresa el nombre del Bucket Destino de Imágenes"

      s3BucketArtifactsName:
        default: "Ingresa el nombre que desea asignar al Bucket de Artefactos"

      ecrRepositoryName:
        default: "Ingresa el nombre que desea asignar al Repositorio ECR"

      codeBuildRoleName:
        default: "Ingresa el nombre que desea asignar al Rol de CodeBuild"

      codeBuildPolicyName:
        default: "Ingresa el nombre que desea asignar al Policy de CodeBuild"

      codePipelineRoleName:
        default: "Ingresa el nombre que desea asignar al Rol de CodePipeline"

      codePipelinePolicyName:
        default: "Ingresa el nombre que desea asignar al Policy de CodePipeline"

      lambdaRoleName:
        default: "Ingresa el nombre que desea asignar al Rol de Lambda"

      lambdaCloudwatchPolicyName:
        default: "Ingresa el nombre que desea asignar al Policy de CloudWatch de Lambda"

      lambdaS3PolicyName:
        default: "Ingresa el nombre que desea asignar al Policy de S3 de Lambda"

Parameters:
  topicName:
    Description: "Nombre del Topic para Notificaciones"
    Type: String
    Default: "takiyacodebuildtopic"

  bucketImgSourceName:
    Description: "Nombre del Bucket Origen de Imágenes"
    Type: String
    Default: "takiyabuckimgsource"

  bucketImgDestinationName:
    Description: "Nombre del Bucket Destino de Imágenes"
    Type: String
    Default: "takiyabuckimgdestin"

  ecrRepositoryName:
    Type: String
    Description: "Nombre de Repositorio ECR"
    Default: "takiyalambdaimgs"

  codeBuildRoleName:
    Type: String
    Description: "Nombre de Rol para CodeBuild"
    Default: "takiyacodebuildrole"

  codeBuildPolicyName:
    Type: String
    Description: "Nombre de Policy para CodeBuild"
    Default: "takiyacodebuildpolicy"

  codePipelineRoleName:
    Type: String
    Description: "Nombre de Rol para CodePipeline"
    Default: "takiyacodepipelinerole"

  codePipelinePolicyName:
    Type: String
    Description: "Nombre de Policy para CodePipeline"
    Default: "takiyacodepipelinepolicy"

  lambdaRoleName:
    Type: String
    Description: "Nombre de Rol para Lambda"
    Default: "takiyalambdarole"

  lambdaCloudwatchPolicyName:
    Type: String
    Description: "Nombre de Policy para CloudWatch de Lambda"
    Default: "takiyalambcwpolicy"

  lambdaS3PolicyName:
    Type: String
    Description: "Nombre de Policy para S3 de Lambda"
    Default: "takiyalambdas3policy"

Resources:
  SNSapprovalprd:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref topicName


  KMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow access for Key Administrators"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"

  S3BucketImgSource:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketImgSourceName

  S3BucketImgDestination:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketImgDestinationName

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ecrRepositoryName

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/service-role/"
      Policies:
        - PolicyName: !Ref codeBuildPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: !GetAtt ECRRepository.Arn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
                  - lambda:*
                  - cloudformation:Describe*
                  - cloudformation:Get*
                  - cloudformation:List*
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:*
                  - sqs:*
                  - sns:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:*
                Resource:
                  - !GetAtt KMSKey.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
      RoleName: !Ref codeBuildRoleName

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Ref codePipelinePolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetProjects
                  - codebuild:ListBuilds
                  - codebuild:ListBuildsForProject
                  - codebuild:ListConnectedOAuthAccounts
                  - codebuild:ListProjects
                  - codebuild:ListRepositories
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - sns:Publish
                  - cloudwatch:*
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                  - s3:*
                  - iam:PassRole
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:GenerateDataKey*
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:Decrypt
                Resource:
                  - !GetAtt KMSKey.Arn
      RoleName: !Ref codePipelineRoleName

  LambdaPolicyCloudWatch:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref lambdaCloudwatchPolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:*
              - cloudwatch:*
              - xray:*
            Resource:
              - "*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaPolicyCloudWatch
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: !Ref lambdaRoleName

  # Políticas para el Bucket Origen de Imagenes
  S3BucketImgSourcePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketImgSource
      PolicyDocument:
        Version: "2012-10-17"
        Id: SSEAndSSLPolicy
        Statement:
          # Permite la lectura de archivos al role Lambda
          - Sid: "Allow read access to Lambda"
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaRole.Arn
            Action:
              - s3:GetObject
            Resource:
              - !Join
                - ""
                - - !GetAtt S3BucketImgSource.Arn
                  - "/*"
          # Permite la escritura de archivos al usuario usado en el código.
          - Sid: "Allow write access to IAM code user"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/takiya-s3"
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Join
                - ""
                - - !GetAtt S3BucketImgSource.Arn
                  - "/*"

  # Políticas para el Bucket Destino de Imagenes
  S3BucketImgDestinationPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketImgDestination
      PolicyDocument:
        Version: "2012-10-17"
        Id: SSEAndSSLPolicy
        Statement:
          # Permite la escritura de archivos al role Lambda
          - Sid: "Allow write access to Lambda"
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaRole.Arn
            Action:
              - s3:PutObject
            Resource:
              - !Join
                - ""
                - - !GetAtt S3BucketImgDestination.Arn
                  - "/*"

  LambdaPolicyS3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref lambdaS3PolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets # permite listar todos los buckets
              - s3:HeadBucket # determina si tienes acceso al bucket
              - s3:ListObjects # permite listar los objetos de un bucket
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Join
                - ""
                - - !GetAtt S3BucketImgSource.Arn
                  - "/*"
              - !Join
                - ""
                - - !GetAtt S3BucketImgDestination.Arn
                  - "/*"

Outputs:
  PipelineCMKey:
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: PipelineCMKeyTakiya

  PipelineRole:
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: PipelineRoleTakiya

  CodeBuildRole:
    Value: !GetAtt CodeBuildRole.Arn
    Export:
      Name: CodeBuildRoleTakiya

  S3BucketImgSource:
    Value: !Ref S3BucketImgSource
    Export:
      Name: S3BucketImgSourceTakiya

  S3BucketImgDestination:
    Value: !Ref S3BucketImgDestination
    Export:
      Name: S3BucketImgDestinationTakiya

  ECRRepository:
    Value: !Ref ECRRepository
    Export:
      Name: ECRRepositoryTakiya

  SNSapprovalprd:
    Value: !Ref SNSapprovalprd
    Export:
      Name: SNSapprovalprdTakiya

  LambdaPolicyCloudWatch:
    Value: !Ref LambdaPolicyCloudWatch
    Export:
      Name: LambdaPolicyCloudWatchTakiya

  LambdaPolicyS3:
    Value: !Ref LambdaPolicyS3
    Export:
      Name: LambdaPolicyS3Takiya
